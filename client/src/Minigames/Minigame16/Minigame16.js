import React, { useState, useRef, useEffect } from 'react';
import './Search.css';

export default function Search() {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0});
  const textContainerRef = useRef(null);
  const [containerPosition, setContainerPosition] = useState({ x: 0, y: 0 });
  const requestRef = useRef(null);
  const currentMousePosition = useRef({ x: 0, y: 0 });
  const [bubbleSize, setBubbleSize] = useState(400); // Initial bubble size
  const [score,  setScore] = useState(0); // Initial score


  // Define an array of emojis with mobile phone included
  const emojiArray = [
    'üòÄ', 'üòÇ', 'ü•≥', 'üòç', 'üòé', 'ü§ñ', 'üåü', 'üî•', 'üíß', 'üçÄ', 
    'üéâ', 'üåà', 'üê±', 'ü¶Ñ', 'üçï', 'üçî', 'üåç', 'üåª', '‚öΩ', 'üéÆ'
  ];
  
  // Define the possible emojis
const emojis = [
    'üòÄ', 'üòÇ', 'ü•≥', 'üòç', 'üòé', 'ü§ñ', 'üåü', 'üî•', 'üíß', 'üçÄ', 
    'üéâ', 'üåà', 'üê±', 'ü¶Ñ', 'üçï', 'üçî', 'üåç', 'üåª', '‚öΩ', 'üéÆ', 
    'üëª', 'üíñ', 'üöÄ', 'üéà', 'üê∂', 'üêª', 'üçâ', 'üç¶', 'üç©', 'üéÇ', 
    '‚ö°', 'üíº', 'üìÖ', 'üìö', 'üîë', 'üñ•Ô∏è', 'üíª', 'üì∏', 'üï∂Ô∏è',
    'üå∏', 'üåº', 'üå∫', 'üçì', 'üçí', 'ü•ë', 'ü••', 'üçç', 'ü•≠', 'ü•ù', 
    'üçÖ', 'ü•¨', 'üçÜ', 'ü•ï', 'üåΩ', 'üßÑ', 'üßÖ', 'üçÑ', 'ü•î', 'üå∞', 
    'ü•ú', 'üç™', 'üßÅ', 'ü•ß', 'üç∞', 'üéÉ', 'üéä', 'üéâ', 'üéóÔ∏è', 'üèÜ', 
    'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üèÖ', 'üéÆ', 'üé≤', 'üÉè', 'üé¥', 'üß©', 
    '‚ôüÔ∏è', 'üßó‚Äç‚ôÇÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è', 'üèåÔ∏è‚Äç‚ôÇÔ∏è', 'üèÑ‚Äç‚ôÇÔ∏è', 'üö¥‚Äç‚ôÇÔ∏è', 'ü§∏‚Äç‚ôÇÔ∏è', 
    'ü§º‚Äç‚ôÇÔ∏è', 'ü§∫', 'üßò‚Äç‚ôÇÔ∏è', 'üéø', '‚õ∑Ô∏è', 'üèä‚Äç‚ôÇÔ∏è', 'ü¶∏‚Äç‚ôÇÔ∏è', 
    'ü¶∏‚Äç‚ôÄÔ∏è', 'ü§¥', 'üë∏', 'ü§¥', 'üßô‚Äç‚ôÇÔ∏è', 'üßô‚Äç‚ôÄÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 
    'üßù‚Äç‚ôÄÔ∏è', 'üßö‚Äç‚ôÇÔ∏è', 'üßö‚Äç‚ôÄÔ∏è', 'üêâ', 'ü¶Ñ', 'üê≤', 'ü¶á', 'üïäÔ∏è', 
    'üê¶', 'üêß', 'ü¶©', 'ü¶ö', 'üêç', 'üê¢', 'ü¶é', 'üê†', 'üêü', 'üê°', 
    'ü¶à', 'üê¨', 'üê≥', 'üêã', 'üêä', 'ü¶è', 'üêò', 'ü¶ô', 'üê™', 
    'ü¶í', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶å', 'üêé', 'üêñ', 'üêê', 'üêë', 
    'üêè', 'ü¶ô', 'üê´', 'ü¶î', 'ü¶á', 'ü¶â', 'ü¶ã', 'üêå', 'üêú', 
    'üêû', 'üê¢', 'üêç', 'ü¶é', 'üê†', 'üêü', 'ü¶à', 'üêã', 'üåç', 
    'üåé', 'üåè', 'üåê', 'üåå', 'üå†', 'üåÉ', 'üèôÔ∏è', 'üåÜ', 'üåâ', 
    'üåÅ', 'üèûÔ∏è', 'üèñÔ∏è', 'üèùÔ∏è', 'üèúÔ∏è', 'üèîÔ∏è', 'üóª', 'üè∞', 
    'üèØ', 'üèüÔ∏è', 'üèõÔ∏è', 'üèóÔ∏è', 'üèòÔ∏è', 'üè°', 'üè†', 'üè¨', 
    'üè™', 'üè´', 'üè≠', 'üè¢', 'üè£', 'üè§', 'üöó', 'üöï', 'üöô', 
    'üöå', 'üöé', 'üèçÔ∏è', 'üö≤', 'üõ¥', 'üõµ', 'üöÑ', 'üöÖ', 
    'üöÜ', 'üöá', 'üöä', 'üöâ', '‚úàÔ∏è', 'üõ©Ô∏è', 'üõ´', 'üõ¨', 
    'üõ≥Ô∏è', 'üö¢', '‚öì', 'üõ∞', 'üöÄ', 'üõ∏', 'üöÅ', 'üöÇ', 
    'üöÉ', 'üöÑ', 'üöÖ', 'üöã', 'üöà', 'üöå', 'üöç', 'üöé', 
    'üöè', 'üèôÔ∏è', 'üåÜ', 'üèñÔ∏è', 'üåâ', 'üåÅ', 'üèûÔ∏è', 'üèîÔ∏è', 
    'üè∞', 'üèØ', 'üèüÔ∏è', 'üèõÔ∏è', 'üèóÔ∏è', 'üèòÔ∏è', 'üè°', 'üè†', 
    'üè¨', 'üè™', 'üè´', 'üè≠', 'üè¢', 'üè£', 'üè§', 'üöó', 
    'üöï', 'üöô', 'üöå', 'üöé', 'üöè', 'üöç', 'üöâ', 'üöå', 
    'üöñ', 'üöò', 'üöì', 'üöë', 'üöê', 'üö®', 'üöç', 'üöå', 
    'üöé', 'üöè', 'üõ¥', 'üõµ', 'üö¥‚Äç‚ôÇÔ∏è', 'üèçÔ∏è', 'üö≤', 
    'üèçÔ∏è', 'üõµ', 'üöó', 'üöï', 'üöô', 'üöñ', 'üöò', 'üöå', 
    'üöç', 'üöé', 'üöè', 'üöå', 'üöê', 'üöë', 'üöí', 'üöì', 
    'üö®', 'ü¶∏‚Äç‚ôÇÔ∏è', 'ü¶∏‚Äç‚ôÄÔ∏è', 'ü§¥', 'üë∏', 'ü§¥', 'üßô‚Äç‚ôÇÔ∏è', 
    'üßô‚Äç‚ôÄÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÄÔ∏è', 'üßö‚Äç‚ôÇÔ∏è', 'üßö‚Äç‚ôÄÔ∏è', 'üêâ', 
    'ü¶Ñ', 'üê≤', 'ü¶á', 'üïäÔ∏è', 'üê¶', 'üêß', 'ü¶©', 'ü¶ö', 
    'üêç', 'üê¢', 'ü¶é', 'üê†', 'üêü', 'üê°', 'ü¶à', 'üê¨', 
    'üê≥', 'üêã'
];

// Function to create a random 2D matrix of emojis with one phone emoji

const createMatrixWithPhone = (rows, cols) => {
    const matrix = Array.from({ length: rows }, () => Array(cols).fill(null));
    const phoneRow = Math.floor(Math.random() * rows);
    const phoneCol = Math.floor(Math.random() * cols);

    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            if (r === phoneRow && c === phoneCol) {
                matrix[r][c] = 'üì±'; // Place the phone emoji
            } else {
                matrix[r][c] = emojis[Math.floor(Math.random() * emojis.length)];
            }
        }
    }

    return matrix;
};

const EmojiGame = () => {
    // Step 1: **Create a state to store the matrices**
    const [matrices, setMatrices] = useState([]);

    useEffect(() => {
        // Step 2: **Create and store matrices only once**
        const newMatrices = [];
        for (let i = 0; i < 50; i++) {
            newMatrices.push(createMatrixWithPhone(30, 30)); // Generate a new matrix
        }
        setMatrices(newMatrices); // Save the generated matrices in the state
    }, []); // Empty dependency array to run only once on mount

    // const handleEmojiClick = (emoji) => {
    //     console.log('Clicked emoji:', emoji);
    //     // Your emoji click handling logic here
    // };
   return matrices;
};



useEffect(() => {
  const updateBubbleSize = () => {
    const screenWidth = window.innerWidth;
    
    // Calculate the bubble size based on screen width
    const minSize = 300; // Minimum size for larger screens
    const maxSize = 150; // Maximum size for mobile view
    const sizeRange = maxSize - minSize;

    // Proportional calculation of bubble size
    const newBubbleSize = Math.max(
      minSize,
      Math.min(maxSize, minSize + (sizeRange * (screenWidth / 640)))
    );

    setBubbleSize(newBubbleSize);
  };

  updateBubbleSize(); // Initial call to set bubble size
  window.addEventListener('resize', updateBubbleSize);

  return () => {
    window.removeEventListener('resize', updateBubbleSize);
  };
}, []);

  // useEffect(() => {
  //   if (textContainerRef.current) {
  //     const rect = textContainerRef.current.getBoundingClientRect();
  //     setContainerPosition({ x: rect.left, y: rect.top });
  //   }
  // }, []);

  useEffect(() => {
    const updateMousePosition = () => {
      // Adjust this part to maintain slower movement
      setMousePosition((prevPosition) => {
        const newX = prevPosition.x + (currentMousePosition.current.x - prevPosition.x) * 1; // Slower movement
        const newY = prevPosition.y + (currentMousePosition.current.y - prevPosition.y) * 1; // Slower movement
        return { x: newX, y: newY };
      });
      //requestRef.current = requestAnimationFrame(updateMousePosition);
    };

    //requestRef.current = requestAnimationFrame(updateMousePosition);

    // Cleanup function to cancel the animation frame
    return () => cancelAnimationFrame(requestRef.current);
  }, []);

  // Update mouse position
  useEffect(() => {
    const updateMousePosition = (e) => {
      setMousePosition({
        x: e.clientX,
        y: e.clientY,
      });
    };

    window.addEventListener('mousemove', updateMousePosition);

    return () => {
      window.removeEventListener('mousemove', updateMousePosition);
    };
  }, []);

  // Handle emoji click
  const handleEmojiClick = (emoji) => {
    if (emoji === 'üêâ') {
      console.log('You found the mobile phone!');
      setScore(200);
    }
  };

  return (
    <div className="w-full overflow-hidden bg-black">
      <div
        ref={textContainerRef}
        className="relative lg:h-[100vh] h-[100vh] cursor-default overflow-hidden"
      >
        {/* Visible layer with radial gradient mask */}
        <div
          className="absolute inset-0"
          style={{
            WebkitMaskImage: `radial-gradient(circle ${bubbleSize}px at ${mousePosition.x}px ${mousePosition.y}px, black 20%, transparent 80%)`,
            maskImage: `radial-gradient(circle ${bubbleSize}px at ${mousePosition.x}px ${mousePosition.y}px, black 20%, transparent 80%)`,
            backdropFilter: 'blur(10px) saturate(700%)',
            transition: 'mask-position 120ms ease-out', // Smooth transition effect
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
          }}
        >
          {/* Emoji Matrix */}
          {/* <div className="grid grid-cols-20 gap-0 h-full">
            {emojiMatrix.map((row, rowIndex) => (
              <div key={rowIndex} className="flex">
                {row.map((emoji, emojiIndex) => (
                  <div 
                    key={emojiIndex} 
                    className="text-[2rem] p-1 cursor-pointer"
                    onClick={() => handleEmojiClick(emoji)} // Click handler for each emoji
                  >
                    {emoji}
                  </div>
                ))}
              </div>
            ))}
          </div> */}
          {EmojiGame().map((row, rowIndex) => (
          <div key={rowIndex} className="flex w-full">
            {row.map((emoji, colIndex) => (
              <div
                key={colIndex}
                className="emoji-item"
                onClick={() => handleEmojiClick(emoji)}
                style={{
                  alignItems: 'center',
                  justifyContent: 'center',
                  height: 'calc(100% / 30)',
                  width: 'calc(100% / 30)', // Adjust for 20 emojis per row
                  textAlign: 'center',
                  fontSize: 'calc(2vw+ 1vh)',
                   // Adjust emoji size based on bubbleSize
                }}
              >
                {emoji}
              </div>
            ))}
          </div>
        ))}
        </div>
      </div>
    </div>
  );
};
